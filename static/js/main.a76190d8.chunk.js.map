{"version":3,"sources":["ui/ForkOnGitHub.js","util/uniqueId.js","ui/LabelledBy.js","ui/OuterHTMLView.js","ui/Activity.js","ui/Transcript.js","hook/useValueRef.js","App.js","reportWebVitals.js","index.js"],"names":["ForkOnGitHub","className","href","rel","target","title","uniqueId","random","toString","substr","LabelledBy","idRef","useRef","current","type","id","OuterHTMLView","elementRef","useState","outerHTML","setOuterHTML","updateOuterHTML","useCallback","format","parser","plugins","parserHTML","useEffect","observer","MutationObserver","observe","attributes","childList","subtree","disconnect","Activity","children","end","classNames","TRANSCRIPT","a0","from","text","timestamp","a1","a2","a3","a4","Transcript","forwardRef","_","ref","sortedTranscriptArray","Object","entries","sort","sortedTranscriptArrayRef","value","useValueRef","focusedActivityKey","setFocusedActivityKey","activeDescendantId","useMemo","focusRelativeActivity","delta","index","findIndex","nextIndex","Math","max","min","length","handleKeyDown","event","key","preventDefault","onKeyDown","tabIndex","role","map","activity","undefined","App","transcriptRef","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.a76190d8.chunk.js","sourcesContent":["import './ForkOnGitHub.css';\nimport './ForkOnGitHub.github-fork-ribbon-css.css';\n\nconst ForkOnGitHub = () => {\n  return (\n    <a\n      className=\"github-fork-ribbon right-bottom\"\n      data-ribbon=\"Fork me on GitHub\"\n      href=\"https://github.com/compulim/experiment-accessible-transcript\"\n      rel=\"noopener noreferrer\"\n      target=\"_blank\"\n      title=\"Fork me on GitHub\"\n    >\n      Fork me on GitHub\n    </a>\n  );\n};\n\nexport default ForkOnGitHub;\n","import random from 'math-random';\n\nexport default function uniqueId() {\n  return random().toString(36).substr(2, 5);\n}\n","import { useRef } from 'react';\n\nimport './LabelledBy.css';\nimport uniqueId from '../util/uniqueId';\n\nconst LabelledBy = () => {\n  const idRef = useRef(`labelled-by__id-${uniqueId()}`);\n\n  return (\n    <div className=\"labelled-by\">\n      <h2 className=\"labelled-by__header\">\n        Understanding how <code>aria-labelledby</code> affect screen reader\n      </h2>\n      <p>\n        When focused on the button below, listen to what screen reader narrated. It should narrate the boxed content\n        below, through the{' '}\n        <nobr>\n          <code>aria-labelledby</code>\n        </nobr>{' '}\n        attribute.\n      </p>\n      <button aria-labelledby={idRef.current} className=\"labelled-by__button\" type=\"button\">\n        Focus on this button\n      </button>\n      <blockquote className=\"labelled-by__label\" id={idRef.current}>\n        You can check the{' '}\n        <a href=\"https://www.bing.com/search?q=weather+in+redmond\" rel=\"noopener noreferrer\" target=\"_blank\">\n          weather forecast\n        </a>{' '}\n        on Bing.\n      </blockquote>\n      <p>\n        On Edge/Chrome, it will narrate \"You can check the weather forecast on Bing, button.\" Probably text alternative\n        computation do not concatenate accessible name or{' '}\n        <nobr>\n          <code>aria-roledescription</code>\n        </nobr>{' '}\n        for the label content.\n      </p>\n    </div>\n  );\n};\n\nexport default LabelledBy;\n","import { format } from 'prettier/standalone';\nimport parserHTML from 'prettier/parser-html';\n\nimport './OuterHTMLView.css';\nimport { useCallback, useEffect, useState } from 'react';\n\nconst OuterHTMLView = ({ elementRef }) => {\n  const [outerHTML, setOuterHTML] = useState('');\n\n  const updateOuterHTML = useCallback(() => {\n    setOuterHTML(format(elementRef.current.outerHTML, { parser: 'html', plugins: [parserHTML] }));\n  }, [elementRef, setOuterHTML]);\n\n  useEffect(() => {\n    const observer = new MutationObserver(updateOuterHTML);\n\n    observer.observe(elementRef.current, {\n      attributes: true,\n      childList: true,\n      subtree: true\n    });\n\n    updateOuterHTML();\n\n    return () => observer.disconnect();\n  }, [elementRef, updateOuterHTML]);\n\n  return (\n    <div className=\"outer-html-view\">\n      <pre className=\"outer-html-view__code\">{outerHTML}</pre>\n    </div>\n  );\n};\n\nexport default OuterHTMLView;\n","import classNames from 'classnames';\n\nimport './Activity.css';\n\nconst Activity = ({ children, end, id }) => {\n  return (\n    <div className={classNames('activity', { 'activity--end': end })} id={id}>\n      <div aria-roledescription=\"message\" className=\"activity__bubble\">\n        {children}\n      </div>\n      <div className=\"activity__timestamp\">Just now</div>\n    </div>\n  );\n};\n\nexport default Activity;\n","import { forwardRef, useCallback, useMemo, useState } from 'react';\n\nimport './Transcript.css';\nimport Activity from './Activity';\nimport uniqueId from '../util/uniqueId';\nimport useValueRef from '../hook/useValueRef';\n\nconst TRANSCRIPT = {\n  a0: {\n    from: 'user',\n    text: 'Hello, World!',\n    timestamp: 0\n  },\n  a1: {\n    from: 'bot',\n    text: 'Aloha!',\n    timestamp: 1\n  },\n  a2: {\n    from: 'user',\n    text: 'Good morning.',\n    timestamp: 2\n  },\n  a3: {\n    from: 'bot',\n    text: 'Hello, Alex.',\n    timestamp: 3\n  },\n  a4: {\n    from: 'bot',\n    text: (\n      <>\n        You can check the{' '}\n        <a href=\"https://www.bing.com/search?q=weather+in+redmond\" rel=\"noopener noreferrer\" target=\"_blank\">\n          weather forecast\n        </a>{' '}\n        on Bing.\n      </>\n    ),\n    timestamp: 4\n  }\n};\n\nconst Transcript = forwardRef((_, ref) => {\n  const sortedTranscriptArray = Object.entries(TRANSCRIPT).sort(([, { timestamp: x }], [, { timestamp: y }]) => x - y);\n\n  const sortedTranscriptArrayRef = useValueRef(sortedTranscriptArray);\n\n  const [focusedActivityKey, setFocusedActivityKey] = useState(() => sortedTranscriptArray[0][0]);\n\n  const activeDescendantId = useMemo(() => {\n    return `transcript__active-descendant-${uniqueId()}`;\n\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [focusedActivityKey]);\n\n  const focusRelativeActivity = useCallback(\n    delta => {\n      setFocusedActivityKey(focusedActivityKey => {\n        const index = sortedTranscriptArrayRef.current.findIndex(([key]) => key === focusedActivityKey);\n\n        const nextIndex = Math.max(0, Math.min(sortedTranscriptArrayRef.current.length - 1, index + delta));\n\n        return sortedTranscriptArrayRef.current[nextIndex][0];\n      });\n    },\n    [setFocusedActivityKey, sortedTranscriptArrayRef]\n  );\n\n  const handleKeyDown = useCallback(\n    event => {\n      switch (event.key) {\n        case 'ArrowUp':\n          focusRelativeActivity(-1);\n          event.preventDefault();\n          break;\n\n        case 'ArrowDown':\n          focusRelativeActivity(1);\n          event.preventDefault();\n          break;\n\n        default:\n          break;\n      }\n    },\n    [focusRelativeActivity]\n  );\n\n  return (\n    <div\n      aria-activedescendant={activeDescendantId}\n      aria-roledescription=\"transcript\"\n      className=\"transcript\"\n      onKeyDown={handleKeyDown}\n      ref={ref}\n      tabIndex={0}\n    >\n      <section role=\"feed\" className=\"transcript__list\">\n        {sortedTranscriptArray.map(([key, activity]) => (\n          <article\n            aria-labelledby={`transcript__row-id-${key}`}\n            className=\"transcript__row\"\n            id={key === focusedActivityKey ? activeDescendantId : undefined}\n            key={key}\n          >\n            <Activity end={activity.from === 'user'} id={`transcript__row-id-${key}`}>\n              {activity.text}\n            </Activity>\n            {key === focusedActivityKey && <div className=\"transcript__row-focus-ring\" />}\n          </article>\n        ))}\n      </section>\n      <div className=\"transcript__focus-ring\" />\n    </div>\n  );\n});\n\nexport default Transcript;\n","import { useRef } from 'react';\n\nexport default function useValueRef(value) {\n  const ref = useRef();\n\n  ref.current = value;\n\n  return ref;\n}\n","import { useRef } from 'react';\nimport './App.css';\n\nimport ForkOnGitHub from './ui/ForkOnGitHub';\nimport LabelledBy from './ui/LabelledBy';\nimport OuterHTMLView from './ui/OuterHTMLView';\nimport Transcript from './ui/Transcript';\n\nfunction App() {\n  const transcriptRef = useRef();\n\n  return (\n    <div className=\"app\">\n      <section className=\"app__panel\">\n        <h1 className=\"app__panel-header\">Accessible transcript</h1>\n        <div className=\"app__panel-body\">\n          <Transcript ref={transcriptRef} />\n        </div>\n        <h1 className=\"app__panel-header\">Further investigations</h1>\n        <div className=\"app__panel-body\">\n          <LabelledBy />\n        </div>\n      </section>\n      <section className=\"app__panel\">\n        <h1 className=\"app__panel-header\">Outer HTML</h1>\n        <div className=\"app__panel-body\">\n          <OuterHTMLView elementRef={transcriptRef} />\n        </div>\n      </section>\n      <ForkOnGitHub />\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}